 Q1 SOLUTION
import requests_with_caching
def get_movies_from_tastedive(movieName):
    baseurl="https://tastedive.com/api/similar"
    params_d={}
    params_d["q"]= movieName
    params_d["type"]= "movies"
    params_d["limit"] = "5"
    resp=requests_with_caching.get(baseurl,params=params_d)
    print(resp.url)
    respdictionary=resp.json()
    print(respdictionary)
    return respdictionary
    
get_movies_from_tastedive("Black Panther")
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_movies_from_tastedive("Bridesmaids")
# get_movies_from_tastedive("Black Panther")

Q2 SOLUTION

import requests_with_caching
def get_movies_from_tastedive(movieName):
    baseurl="https://tastedive.com/api/similar"
    params_d={}
    params_d["q"]= movieName
    params_d["type"]= "movies"
    params_d["limit"] = "5"
    resp=requests_with_caching.get(baseurl,params=params_d)
    print(resp.url)
    respdictionary=resp.json()
    return respdictionary
def extract_movie_titles(movieName):
    result=[]
    for listRes in movieName['Similar']['Results']:
        result.append(listRes['Name'])
    return result

# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
# extract_movie_titles(get_movies_from_tastedive("Black Panther"))

Q3 SOLUTION

import requests_with_caching
def get_movies_from_tastedive(movieName):
    baseurl="https://tastedive.com/api/similar"
    params_d={}
    params_d["q"]= movieName
    params_d["type"]= "movies"
    params_d["limit"] = "5"
    resp=requests_with_caching.get(baseurl,params=params_d)
    print(resp.url)
    respdictionary=resp.json()
    return respdictionary
def extract_movie_titles(movieName):
    result=[]
    for listRes in movieName['Similar']['Results']:
        result.append(listRes['Name'])
    return result
def get_related_titles(listMovieName):
    if listMovieName != []:
        auxList=[]
        relatedList=[]
        for movieName in listMovieName:
            auxList = extract_movie_titles(get_movies_from_tastedive(movieName))
            for movieNameAux in auxList:
                if movieNameAux not in relatedList:
                    relatedList.append(movieNameAux)
        print(relatedList)
        return relatedList
    return listMovieName
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_related_titles(["Black Panther", "Captain Marvel"])
# get_related_titles([])

Q4 SOLUTION

import requests_with_caching
def get_movie_data(titleofmovie):
    baseurl="http://www.omdbapi.com/"
    params_d={}
    params_d["t"]=titleofmovie
    params_d["r"]="json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDictionary = resp.json()
    print(respDictionary)
    return respDictionary
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
get_movie_data("Venom")
get_movie_data("Baby Mama")
get_movie_data("Black Panther")

Q5 SOLUTION

import requests_with_caching
def get_movie_data(titleofmovie):
    baseurl="http://www.omdbapi.com/"
    params_d={}
    params_d["t"]=titleofmovie
    params_d["r"]="json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDictionary = resp.json()
    print(respDictionary)
    return respDictionary
def get_movie_rating(moviename):

    for RatingList in moviename["Ratings"]:
        if RatingList["Source"]== "Rotten Tomatoes":
            Rating = int(RatingList["Value"][:2])
    
        else: Rating = 0
    return Rating
    
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
get_movie_rating(get_movie_data("Deadpool 2"))

Q6 SOLUTION

import requests_with_caching
def get_movies_from_tastedive(movieName):
    baseurl="https://tastedive.com/api/similar"
    params_d={}
    params_d["q"]= movieName
    params_d["type"]= "movies"
    params_d["limit"] = "5"
    resp=requests_with_caching.get(baseurl,params=params_d)
    print(resp.url)
    respdictionary=resp.json()
    return respdictionary
def extract_movie_titles(movieName):
    result=[]
    for listRes in movieName['Similar']['Results']:
        result.append(listRes['Name'])
    return result
def get_related_titles(listMovieName):
    if listMovieName != []:
        auxList=[]
        relatedList=[]
        for movieName in listMovieName:
            auxList = extract_movie_titles(get_movies_from_tastedive(movieName))
            for movieNameAux in auxList:
                if movieNameAux not in relatedList:
                    relatedList.append(movieNameAux)
        print(relatedList)
        return relatedList
    return listMovieName

def get_movie_data(titleofmovie):
    baseurl="http://www.omdbapi.com/"
    params_d={}
    params_d["t"]=titleofmovie
    params_d["r"]="json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDictionary = resp.json()
    print(respDictionary)
    return respDictionary
def get_movie_rating(moviename):
    Rating=""
    for RatingList in moviename["Ratings"]:
        if RatingList["Source"]== "Rotten Tomatoes":
            Rating = RatingList["Value"]
    if Rating != "":
        rating = int(Rating[:2])
    else: rating = 0
    return rating
def get_sorted_recommendations(movietitlelist):
    listmovies=sorted(get_related_titles(movietitlelist),key=lambda titleofmovie:(get_movie_rating(get_movie_data(titleofmovie)),titleofmovie),reverse=True)
    return listmovies
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_sorted_recommendations(["Bridesmaids", "Sherlock Holmes"])


